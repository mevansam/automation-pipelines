- type: replace
  path: /jobs/-
  value:
    name: configure-rabbitmq-tile
    serial_groups: [configure]
    on_failure:
      do:
      - task: notify on configure-rabbitmq-tile failure

    serial: true
    serial_groups: [configure]
    plan:
    - aggregate:
      - get: automation
      - get: inceptor
      - get: automation-extensions
      - get: terraform-output
      - get: product-versions
      - get: pivnet-product
        resource: ${product_name}-tile
        passed: [upload-${product_name}-tile]
        trigger: true
        params:
          skip_download: 'true'

    # Stage product tile
    - task: stage-tile
      file: automation/lib/tasks/opsman/stage-product/task.yml
      params:
        OPSMAN_HOST: ((opsman_host))
        OPSMAN_CLIENT_ID: ((opsman_client_id))
        OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
        OPSMAN_USERNAME: ((opsman_admin_username))
        OPSMAN_PASSWORD: ((opsman_admin_password))
        STAGE_AND_APPLY: false
        ENABLE_ERRANDS: ((enable_errands))

    # Configure product tile
    - task: configure
      file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/configure-rabbitmq/task.yml
      params:
        OPSMAN_HOST: ((opsman_host))
        OPSMAN_CLIENT_ID: ((opsman_client_id))
        OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
        OPSMAN_USERNAME: ((opsman_admin_username))
        OPSMAN_PASSWORD: ((opsman_admin_password))
        # The IAAS to configure for
        IAAS: ((iaas_type))
        # Product configuration
        TEMPLATE_OVERRIDE_PATH: automation-extensions/((pcf_tile_templates_path))/rabbitmq/((environment))
        ERRANDS_TO_DISABLE: ${errands_to_disable}
        ERRANDS_TO_ENABLE: ${errands_to_enable}
        # Networking
        NETWORK_NAME: services
        SERVICE_NETWORK_NAME: dynamic-services
        SINGLETON_AVAILABILITY_ZONE: '' # Sourced from terraform output
        AVAILABILITY_ZONES: '' # Sourced from terraform output
        # Resources
        # RABBITMQ_LB_NAME:
        INTERNET_CONNECTED: false
        # Properties
        ADMIN_PASSWORD: ((common_admin_password))
        SERVER_PLUGINS: 'rabbitmq_management'
        CA_CERTIFICATE: ''
        SERVER_TLS_CERT: ''
        SERVER_TLS_KEY: ''
        EXTERNAL_DNS_NAME: ''
        DISK_ALARM_THRESHOLD: "mem_relative_1_5"
        HAPROXY_STATIC_IPS: ''
        SERVER_NODE_STATIC_IPS: ''
        SYSLOG_ADDRESS: ''
        SYSLOG_PORT: null
        SYSLOG_TRANSPORT: ''
        SYSLOG_TLS: false
        SYSLOG_PERMITTED_PEER: ''
        SYSLOG_CA_CERT: ''
        ON_DEMAND_SERVICE_INSTANCE_QUOTA: 20
        PLAN_1_CF_SERVICE_ACCESS: "enable"
        PLAN_1_NAME: "single-node"
        PLAN_1_DESCRIPTION: "This plan provides a single dedicated RabbitMQ node"
        PLAN_1_FEATURES: "RabbitMQ"
        PLAN_1_INSTANCE_QUOTA: 5
        PLAN_1_NUMBER_OF_NODES: 1
        PLAN_1_CLUSTER_STRATEGY: "pause_minority"
        PLAN_1_VM_TYPE: "large"
        PLAN_1_PERSISTENT_DISK_TYPE: 30720

- type: replace
  path: /jobs/name=deploy/plan/0/aggregate/-
  value:
    get: ${product_name}-tile
    passed: [configure-rabbitmq-tile]
    trigger: true
    params:
      skip_download: 'true'
