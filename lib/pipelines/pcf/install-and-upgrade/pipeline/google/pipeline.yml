---
groups:
- name: Install and Upgrade Director
  jobs:
  - destroy-environment
  - prepare-environment
  - configure-director
  - deploy-director
  - director-post-deploy
- name: Install and Upgrade Products

resource_types:

- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:

- name: automation
  type: git
  source:
    uri: ((automation_pipelines_repo))
    branch: ((automation_pipelines_branch))

- name: automation-extensions
  type: git
  source:
    uri: ((automation_extensions_repo))
    branch: ((automation_extensions_branch))

- name: terraform-output
  type: s3
  source:
    bucket: pcf
    endpoint: ((autos3_url))
    access_key_id: ((autos3_access_key))
    secret_access_key: ((autos3_secret_key))
    regexp: terraform-output/pcf-env-(.*).sh

- name: opsman-image
  type: s3
  source:
    bucket: pcf
    endpoint: ((autos3_url))
    access_key_id: ((autos3_access_key))
    secret_access_key: ((autos3_secret_key))
    regexp: downloads/ops-manager_(.*).tgz

- name: product-versions
  type: s3
  source:
    bucket: pcf
    endpoint: ((autos3_url))
    access_key_id: ((autos3_access_key))
    secret_access_key: ((autos3_secret_key))
    regexp: downloads/versions-(.*)

jobs:

- name: destroy-environment
  serial: true
  serial_groups: [terraform]
  plan:
  - aggregate:
    - get: automation
    - get: automation-extensions

  - task: set-stopped-state
    file: automation/lib/inceptor/tasks/toggle-state/task.yml
    params: 
      OFF_STATE: started
      ON_STATE: stopped
      VERSION_INCREMENT: 0
      AUTOS3_URL: ((autos3_url))
      AUTOS3_ACCESS_KEY: ((autos3_access_key))
      AUTOS3_SECRET_KEY: ((autos3_secret_key))

  - task: set-director-not-ready
    file: automation/lib/inceptor/tasks/toggle-state/task.yml
    params: 
      OFF_STATE: director_ready
      ON_STATE: director_not_ready
      AUTOS3_URL: ((autos3_url))
      AUTOS3_ACCESS_KEY: ((autos3_access_key))
      AUTOS3_SECRET_KEY: ((autos3_secret_key))

  - task: destroy-infrastructure
    file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/destroy-infrastructure/task.yml
    params:
      # PCF Ops Manager credentials
      OPSMAN_HOST: ((opsman_host))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
      # Target IaaS type
      IAAS: ((iaas_type))
      # Google Cloud Credentials
      GCP_SERVICE_ACCOUNT_KEY: ((gcp_service_account_key))
      GCP_PROJECT: ((gcp_project))
      GCP_REGION: ((gcp_region))
      # The bucket where the Terraform state 
      # will be saved
      TERRAFORM_STATE_BUCKET: ((terraform_state_bucket))
      # Prefix to use with cloud resource names 
      # as well as the location of Terraform
      # state
      DEPLOYMENT_PREFIX: ((deployment_prefix))
      # Path for additional Terraform templates
      # that customize the default infrastructure
      # templates 
      TEMPLATE_OVERRIDE_PATH: automation-extensions/((pcf_terraform_templates_path))/((environment))/infrastructure
      # Inputs to PCF PAS infrastructure Terraform templates
      TF_VAR_environment: ((environment))
      TF_VAR_bootstrap_state_bucket: ((terraform_state_bucket))
      TF_VAR_bootstrap_state_prefix: ((bootstrap_state_prefix))

- name: prepare-environment
  on_failure:
    do:
    - task: notify on prepare-environment failure

  serial: true
  serial_groups: [terraform,opsman]
  plan:
  - aggregate:
    - get: automation
    - get: automation-extensions
    - get: pivnet-download
      resource: opsman-image
      trigger: true

  # Wait if the Ops Manager is currently in the
  # process of applying a change
  - task: wait-if-apply-in-progress
    file: automation/lib/tasks/opsman/wait-opsman/task.yml
    params:
      OPSMAN_HOST: ((opsman_host))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_secret))

  # If a new Ops Manager has been uploaded to the  
  # IaaS then set the director to a not-ready state 
  # so the new one can be deployed
  - task: set-director-not-ready
    file: automation/lib/inceptor/tasks/toggle-state/task.yml
    params: 
      OFF_STATE: director_ready
      ON_STATE: director_not_ready
      AUTOS3_URL: ((autos3_url))
      AUTOS3_ACCESS_KEY: ((autos3_access_key))
      AUTOS3_SECRET_KEY: ((autos3_secret_key))

  # Prepare the IaaS for PCF (e.g. DNS, network, Upload Ops Manager, etc.)
  - task: create-infrastructure
    file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/create-infrastructure/task.yml
    params:
      # Target IaaS type
      IAAS: ((iaas_type))
      # Google Cloud Credentials
      GCP_SERVICE_ACCOUNT_KEY: ((gcp_service_account_key))
      GCP_PROJECT: ((gcp_project))
      GCP_REGION: ((gcp_region))
      # The bucket where the Terraform state 
      # will be saved
      TERRAFORM_STATE_BUCKET: ((terraform_state_bucket))
      # Prefix to use with cloud resource names 
      # as well as the location of Terraform
      # state
      DEPLOYMENT_PREFIX: ((deployment_prefix))
      # Path for additional Terraform templates
      # that customize the default infrastructure
      # templates 
      TEMPLATE_OVERRIDE_PATH: automation-extensions/((pcf_terraform_templates_path))/((environment))/infrastructure
      # Inputs to PCF PAS infrastructure Terraform templates
      TF_VAR_environment: ((environment))
      TF_VAR_bootstrap_state_bucket: ((terraform_state_bucket))
      TF_VAR_bootstrap_state_prefix: ((bootstrap_state_prefix))
      TF_VAR_system_domain_prefix: ((system_domain_prefix))
      TF_VAR_apps_domain_prefix: ((apps_domain_prefix))
      TF_VAR_pcf_ert_ssl_cert: ((ert_ssl_cert1))
      TF_VAR_pcf_ert_ssl_key: ((ert_ssl_key1))
      TF_VAR_pcf_saml_ssl_cert: ((saml_ssl_cert1))
      TF_VAR_pcf_saml_ssl_key: ((saml_ssl_key1))
      TF_VAR_pas_db_type: ((pas_db_type))
      TF_VAR_event_alerts_db_type: ((event_alerts_db_type))
      TF_VAR_db_username: ((db_username))
      TF_VAR_db_password: ((db_password))

  # Save terraform output so it can be referenced
  # by external scripts.
  - task: save-terraform-output
    file: automation/lib/inceptor/tasks/upload-object/task.yml
    params: 
      BUCKET: pcf
      UPLOAD_PATH: terraform-output
      OBJECT_NAME: pcf-env.sh
      AUTOS3_URL: ((autos3_url))
      AUTOS3_ACCESS_KEY: ((autos3_access_key))
      AUTOS3_SECRET_KEY: ((autos3_secret_key))

- name: configure-director
  on_failure:
    do:
    - task: notify on configure-director failure

  serial: true
  serial_groups: [opsman]
  plan:
  - aggregate:
    - get: automation
    - get: automation-extensions
    - get: terraform-output
      trigger: true
    - get: opsman-image
      passed: [prepare-environment]
      params:
        skip_download: 'true'

  # Initialize Ops Manager. This is a no-op
  # if the Ops Manager has already been 
  # initialized.
  - task: configure-opsman-authentication
    file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/configure-opsman/task.yml
    params:
      OPSMAN_HOST: ((opsman_host))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
      OPSMAN_DECRYPTION_KEY: ((opsman_admin_password))

  # Configure the Ops Manager Bosh Director
  - task: configure-director
    file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/configure-director/task.yml
    params:
      # Target IaaS type
      IAAS: ((iaas_type))
      # IAAS properties
      GCP_SERVICE_ACCOUNT_KEY: ((gcp_service_account_key))
      GCP_PROJECT: ((gcp_project))
      GCP_REGION: ((gcp_region))
      # Ops Manager Credentials
      OPSMAN_HOST: ((opsman_host))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
      # JQ configuration template overrides 
      TEMPLATE_OVERRIDE_PATH: automation-extensions/((pcf_tile_templates_path))/director
      # Prefix to use with cloud resource names 
      # as well as the location of Terraform
      # state
      DEPLOYMENT_PREFIX: ((deployment_prefix))

- name: deploy-director
  on_failure:
    do:
    - task: notify on deploy-director failure
  on_success:
    do:
    - task: notify on deploy-director success

  serial: true
  serial_groups: [opsman]
  plan:
  - aggregate:
    - get: automation
    - get: product-versions
    - get: terraform-output
      trigger: true
    - get: opsman-image
      passed: [configure-director]
      params:
        skip_download: 'true'

  # This task will create a release manifest which will
  # be included with any failure or success notifications.    
  # - task: create-release-manifest
  #   file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/create-release-manifest/task.yml
  #   input_mapping:
  #     versions: product-versions
  #     input-files: deploy-director-job-info
  #   output_mapping: 
  #     output-files: deploy-director-job-info
  #   params:
  #     CONCOURSE_URL: ((concourse_url))
  #     CONCOURSE_USER: ((concourse_user))
  #     CONCOURSE_PASSWORD: ((concourse_password))
  #     AUTOS3_URL: ((autos3_url))
  #     AUTOS3_ACCESS_KEY: ((autos3_access_key))
  #     AUTOS3_SECRET_KEY: ((autos3_secret_key))
  #     OPSMAN_HOST: ((opsman_host))
  #     OPSMAN_USERNAME: ((opsman_admin_username))
  #     OPSMAN_PASSWORD: ((opsman_admin_password))
  #     OPSMAN_CLIENT_ID: ((opsman_client_id))
  #     OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
  #     ENVIRONMENT: ((environment))
  #     VERSION_ROW_STYLE: 'color:silver;'
  #     NEW_VERSION_ROW_STYLE: 'color:black;'

  # Wait if the Ops Manager is currently in the
  # process of applying a change
  - task: wait-if-apply-in-progress
    file: automation/lib/tasks/opsman/wait-opsman/task.yml
    params:
      OPSMAN_HOST: ((opsman_host))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_secret))

  # Invoke Ops Manager Apply changes and ensure
  # only changes to director will be applied
  - task: deploy-director
    file: automation/lib/tasks/opsman/apply-changes/task.yml
    params:
      OPSMAN_HOST: ((opsman_host))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_id))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
      DISABLE_ERRANDS: true

  # Sets the director ready state which will 
  # allow any jobs that depend on the director
  # to be up to proceed.
  - task: set-director-ready
    file: automation/lib/inceptor/tasks/toggle-state/task.yml
    params: 
      OFF_STATE: director_not_ready
      ON_STATE: director_ready
      AUTOS3_URL: ((autos3_url))
      AUTOS3_ACCESS_KEY: ((autos3_access_key))
      AUTOS3_SECRET_KEY: ((autos3_secret_key))

  # Update product versions determined when release
  # manifest is created
  - task: save-product-versions
    file: automation/lib/inceptor/tasks/upload-object/task.yml
    input_mapping:
      upload_path: deploy-director-job-info
    params: 
      BUCKET: pcf
      UPLOAD_PATH: downloads
      OBJECT_NAME: versions
      AUTOS3_URL: ((autos3_url))
      AUTOS3_ACCESS_KEY: ((autos3_access_key))
      AUTOS3_SECRET_KEY: ((autos3_secret_key))

- name: director-post-deploy
  on_failure:
    do:
    - task: notify on director-post-deploy failure

  serial: true
  serial_groups: [opsman]
  plan:
  - aggregate:
    - get: automation
    - get: automation-extensions
    - get: terraform-output
      trigger: true
    - get: opsman-image
      passed: [deploy-director]
      params:
        skip_download: 'true'

  # Create and upload deployment patcher BOSH release
  - task: upload-patcher
    file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/upload-patcher/task.yml
    params:
      OPSMAN_HOST: ((opsman_host))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_id))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))

  # Upload runtime deployment to patch harbor
  - task: upload-harbor-patch
    file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/set-harbor-runtime-patch/task.yml
    params:
      OPSMAN_HOST: ((opsman_host))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_id))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
