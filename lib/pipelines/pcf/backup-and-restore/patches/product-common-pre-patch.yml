#
# Backup product
#

- type: replace
  path: /resources/-
  value:
    name: backup-${product_name}-timestamp
    type: keyval

- type: replace
  path: /jobs/-
  value:
    name: backup-${product_name}
    serial: true
    serial_groups: [${product_name}]
    on_failure:
      do:
      - task: notify on backup-${product_name} failure
    plan:
    - aggregate:
      - get: automation
      - get: inceptor
      - get: schedule
      - get: backup-session
        passed: [backup-regulator]
        trigger: true

    - task: backup-${product_name}-tile
      privileged: true
      file: automation/lib/tasks/bbr/backup-${product_name}/task.yml
      params: 
        TRACE: ((trace))
        SSH_KEY: ((ssh_key))

        ## Backup storage backend type should be one of 'scp', 's3', 'gcs', 'swift'
        BACKUP_TYPE: ((backup_storage_type))
        BACKUP_TARGET: ((backup_target))/${product_name}
        
        ## Credentials for GCS access
        GCP_SERVICE_ACCOUNT_KEY: ((gcp_service_account_key))
        GCS_BUCKET_NAME: ((gcs_bucket_name))

        ## GCS mount path
        GCS_MOUNT: ((gcs_mount))
        GCSFUSE_OPTIONS: '--limit-ops-per-sec 0.25'

    - task: cleanup
      privileged: true
      file: automation/lib/tasks/bbr/cleanup/task.yml
      params: 
        TRACE: ((trace))
        SSH_KEY: ((ssh_key))

        ## Backup storage backend type should be one of 'scp', 's3', 'gcs', 'swift'
        BACKUP_TYPE: ((backup_storage_type))
        BACKUP_TARGET: ((backup_target))/${product_name}
        
        ## Credentials for GCS access
        GCP_SERVICE_ACCOUNT_KEY: ((gcp_service_account_key))
        GCS_BUCKET_NAME: ((gcs_bucket_name))

        ## GCS mount path
        GCS_MOUNT: ((gcs_mount))

    - put: backup-${product_name}-timestamp
      params:
        file: restore-timestamp/metadata

#
# Restore product
#

- type: replace
  path: /jobs/-
  value:
    name: restore-${product_name}
    serial: true
    serial_groups: [${product_name}]
    on_failure:
      do:
      - task: notify on restore-${product_name} failure
    plan:
    - aggregate:
      - get: automation
      - get: inceptor
      - get: backup-${product_name}-timestamp
        passed: [backup-${product_name}]

    - task: prepare-restore
      privileged: true
      file: automation/lib/pipelines/pcf/backup-and-restore/tasks/prepare-opsman-restore/task.yml
      params: 
        TRACE: ((trace))
        SSH_KEY: ((ssh_key))
        OPSMAN_HOST: ((opsman_host))
        OPSMAN_USERNAME: ((opsman_username))
        OPSMAN_PASSWORD: ((opsman_password))
        OPSMAN_SSH_USER: ((opsman_ssh_user))
        OPSMAN_SSH_PASSWD: ((opsman_ssh_passwd))
        OPSMAN_DECRYPTION_KEY: ((opsman_pass_phrase))
        OPSMAN_CLIENT_ID: ((pcfops_client))
        OPSMAN_CLIENT_SECRET: ((pcfops_secret))

        ## Backup storage backend type should be one of 'scp', 's3', 'gcs', 'swift'
        BACKUP_TYPE: ((backup_storage_type))
        BACKUP_TARGET: ((backup_target))/${product_name}
        
        ## Credentials for GCS access
        GCP_SERVICE_ACCOUNT_KEY: ((gcp_service_account_key))
        GCS_BUCKET_NAME: ((gcs_bucket_name))

        ## GCS mount path
        GCS_MOUNT: ((gcs_mount))

    - task: restore-${product_name}
      privileged: true
      file: automation/lib/tasks/bbr/restore-${product_name}/task.yml
      params: 
        TRACE: ((trace))
        SSH_KEY: ((ssh_key))

        ## Backup storage backend type should be one of 'scp', 's3', 'gcs', 'swift'
        BACKUP_TYPE: ((backup_storage_type))
        BACKUP_TARGET: ((backup_target))/${product_name}
        
        ## Credentials for GCS access
        GCP_SERVICE_ACCOUNT_KEY: ((gcp_service_account_key))
        GCS_BUCKET_NAME: ((gcs_bucket_name))

        ## GCS mount path
        GCS_MOUNT: ((gcs_mount))
