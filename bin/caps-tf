#!/bin/bash

root_dir=$(cd $(dirname $BASH_SOURCE)/.. && pwd)
source $root_dir/bin/common
common::initialize

set -e

usage () {
    echo -e "${BLUE}\nUSAGE: caps-tf plan|apply|destroy|recreate-bastion [-o|--options <TERRAFORM_OPTIONS>] [-i|--init] [-c|--clean]\n"
    echo -e "    This utility will perform the given Terraform action on the deployment's bootstrap template.\n"
    echo -e "    -o|--options  <TERRAFORM_OPTIONS>  Additional options to pass to terraform."
    echo -e "    -i|--init                          (Re)Initializes the terraform workspace."
    echo -e "    -c|--clean                         Ensures any rebuilds are clean (i.e. recreate-bastion with this"
    echo -e "                                       option will ensure the persistent data volume is also recreated."
    echo -e "${NC}"
}

case "$1" in
    '-?'|--help|help)
        usage
        exit 0
        ;;
    plan|apply|output|destroy|recreate-bastion)
        tf_action=$1
        shift
        ;;
esac


while [[ $# -gt 0 ]]; do
    case "$1" in
        -v|--debug)
            set -x
            ;;
        -o|--options)
            terraform_options=$2
            shift
            ;;
        -i|--init)
            terraform_init=yes
            ;;
        -c|--clean)
            clean=yes
            ;;
        *)
            usage
            exit 1
            ;;
    esac
    shift
done

cd $workspace_path

terraform_path=$root_dir/deployments/$deployment_name/$iaas_provider/terraform
bootstrap_state_prefix=${TF_VAR_vpc_name}-bootstrap

export TF_VAR_ssh_key_file_path=$workspace_path

if [[ ! -e .terraform || $terraform_init == yes ]]; then

    if [[ -z $TF_VAR_terraform_state_bucket ]]; then
        echo -e "\nThe following environment variable must be set in order to initialize the context.\n"
        echo -e "    TF_VAR_terraform_state_bucket  The backend state bucket to save the bootstrap state."
        echo -e "${NC}"
        exit 1
    fi
    
    echo -e "\nInitializing Terraform bootstrap state using"
    echo -e "state that may already exist in the following location.\n"
    echo -e "    TF_VAR_terraform_state_bucket = $TF_VAR_terraform_state_bucket\n"
    
    case $iaas_provider in
        google)
            terraform init \
                -backend-config="bucket=$TF_VAR_terraform_state_bucket" \
                -backend-config="prefix=$bootstrap_state_prefix" \
                $terraform_path
            ;;
        *)
            # Default is to use an S3 backend
            if [[ -n $TF_STATE_S3_ENDPOINT ]]; then
                terraform init \
                    -backend-config="bucket=$TF_VAR_terraform_state_bucket" \
                    -backend-config="key=$bootstrap_state_prefix" \
                    -backend-config="endpoint=$TF_STATE_S3_ENDPOINT" \
                    $terraform_path
            else
                # Use AWS S3 as default
                terraform init \
                    -backend-config="bucket=$TF_VAR_terraform_state_bucket" \
                    -backend-config="key=$bootstrap_state_prefix" \
                    $terraform_path
            fi
            ;;
    esac

    # Seems to be a bug in terraform where 'output' and 'taint' command are 
    # unable to load the backend state when the working directory does not 
    # have the backend resource template file.
    backend_type=$(cat .terraform/terraform.tfstate | jq -r .backend.type)
    cat << ---EOF > $workspace_path/backend.tf
terraform {
  backend "$backend_type" {}
}
---EOF

fi

case $tf_action in
    plan)
        terraform plan -out=terraform.plan $terraform_options $terraform_path
        ;;
    output)
        terraform output $terraform_options 2>&1 | tee terraform.output
        ;;
    apply)
        [[ -e terraform.plan ]] || \
            terraform plan -out=terraform.plan $terraform_options $terraform_path

        terraform apply $terraform_options terraform.plan 2>&1 \
            | tee terraform.output | awk '/Outputs:/ {l=999}; (l-- > 0) { $0="" } 1' | awk 'length'

        rm -f terraform.plan
        ;;
    destroy)
        terraform destroy $terraform_options \
            -state=$workspace_path/.terraform/terraform.tfstate 2>&1 \
            | tee terraform.output

        rm -f terraform.plan
        ;; 
    recreate-bastion)

        case $iaas_provider in
            google)
                terraform taint \
                    -state=$workspace_path/.terraform/terraform.tfstate \
                    module.bootstrap.google_compute_instance.bastion

                if [[ $clean == yes ]]; then
                    terraform taint \
                        -state=$workspace_path/.terraform/terraform.tfstate \
                        module.bootstrap.google_compute_disk.bastion-data
                fi
                ;;
            vsphere)
                if [[ -n $TF_VAR_dmz_network ]]; then
                    terraform taint \
                        -state=$workspace_path/.terraform/terraform.tfstate \
                        module.bootstrap.vsphere_virtual_machine.bastion-2nic
                else
                    terraform taint \
                        -state=$workspace_path/.terraform/terraform.tfstate \
                        module.bootstrap.vsphere_virtual_machine.bastion-1nic
                fi

                if [[ $clean == yes ]]; then
                    terraform taint \
                        -state=$workspace_path/.terraform/terraform.tfstate \
                        module.bootstrap.vsphere_virtual_disk.bastion-data
                fi
                ;;
            *)
                echo -e "${RED}\nERROR! Unable to determine resources of IaaS '$iaas_provider' to taint.${NC}\n"
                exit 1
        esac
        $0 plan
        $0 apply
        ;;
esac

echo -e "${NC}"